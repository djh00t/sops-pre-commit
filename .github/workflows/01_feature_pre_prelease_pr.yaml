---
name: 01 Feature PR ðŸ¤–

on:
  # Push to all but main, master
  push:
    branches-ignore:
      - main
      - master
      - release
      - pre-release
  workflow_dispatch: {}

jobs:
  create-feature-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.4.1"

      - name: Load Node.js cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-cache
          restore-keys: |
            ${{ runner.os }}-node-cache-

      - name: Install Node.js dependencies
        run: |
          npm install

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Load Python cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.in') }}
          restore-keys: |
                ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.in') }}
                ${{ runner.os }}-pip-cache-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine packaging build toml

      - name: Set up environment variables
        run: |
          # Setup GITHUB_TOKEN
          # echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup GH_TOKEN
          # echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Setup OpenAI API Key
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # Get Current PR Title
          PR_TITLE=$(gh pr list --json title --jq '.[0].title' || echo "")
          # Sanitize PR_TITLE to remove problematic characters
          SANITIZED_PR_TITLE=$(echo "$PR_TITLE" | tr -d '\n' | tr -d '\r' | tr -d '"')
          echo "PR_TITLE=$SANITIZED_PR_TITLE" >> $GITHUB_ENV
          echo "PR TITLE: $PR_TITLE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Authenticate GitHub CLI
        run: |
          unset GH_TOKEN
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Configure Git & Login to GitHub CLI
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Compile Python requirements
        run: make install

      - name: Run Unit Tests
        run: poetry run pytest

      # Check if PR exists, if it doesn't create one with a generated title using
      # pr-title-generate
      - name: Create or Update PR
        id: pr
        run: |
          SOURCE_BRANCH=$(poetry run git rev-parse --abbrev-ref HEAD)
          PR_URL=$(poetry run gh pr list --head $SOURCE_BRANCH --json url --jq '.[0].url' || echo "")
          PR_TITLE=$(poetry run pr-title-generate)
          echo "PR_TITLE: $PR_TITLE"
          BASE_BRANCH="pre-release"
          if [ -z "$PR_URL" ]; then
            PR_URL=$(gh pr create --title "Pre-release $SOURCE_BRANCH" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH --head $SOURCE_BRANCH)
            echo "PR_URL: $PR_URL"
          fi
          PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $BASE_BRANCH)
          gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
        shell: /usr/bin/bash -e {0}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}
